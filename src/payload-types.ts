/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    crmusers: CrmuserAuthOperations;
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    crmusers: Crmuser;
    users: User;
    content: Content;
    products: Product;
    vendors: Vendor;
    'blog-posts': BlogPost;
    media: Media;
    category: Category;
    comments: Comment;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    crmusers: CrmusersSelect<false> | CrmusersSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    content: ContentSelect<false> | ContentSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    vendors: VendorsSelect<false> | VendorsSelect<true>;
    'blog-posts': BlogPostsSelect<false> | BlogPostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    category: CategorySelect<false> | CategorySelect<true>;
    comments: CommentsSelect<false> | CommentsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user:
    | (Crmuser & {
        collection: 'crmusers';
      })
    | (User & {
        collection: 'users';
      });
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface CrmuserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "crmusers".
 */
export interface Crmuser {
  id: string;
  password: string | null;
  role?: ('admin' | 'editor' | 'viewer' | 'vendor') | null;
  isActive?: boolean | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'user' | 'admin';
  isActive?: boolean | null;
  provider: 'local' | 'google' | 'facebook' | 'twitter' | 'tiktok';
  socialId?: string | null;
  tokenVersion?: number | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "content".
 */
export interface Content {
  id: string;
  pageType: 'homepage' | 'about' | 'methodology' | 'free-sample-test' | 'general';
  /**
   * Unique identifier for the URL (e.g., "about", "homepage")
   */
  slug: string;
  title: string;
  /**
   * SEO meta description
   */
  metaDescription?: string | null;
  status?: ('draft' | 'published' | 'archived') | null;
  views?: number | null;
  /**
   * Main mission statement for the about page
   */
  missionStatement?: string | null;
  values?:
    | {
        title: string;
        description: string;
        id?: string | null;
      }[]
    | null;
  approach?: string | null;
  teamMembers?:
    | {
        name: string;
        role: string;
        bio?: string | null;
        image?: (string | null) | Media;
        /**
         * LinkedIn profile URL
         */
        linkedin?: string | null;
        id?: string | null;
      }[]
    | null;
  backers?: {
    title?: string | null;
    description?: string | null;
    /**
     * Name of the main backer/leader
     */
    leader?: string | null;
    /**
     * URL to leader's profile
     */
    leaderProfile?: string | null;
  };
  ctaSection?: {
    title: string;
    description: string;
    buttonText: string;
    buttonLink: string;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: string;
  /**
   * Unique index for ordering products
   */
  index: number;
  name: string;
  rating?: number | null;
  avg?: number | null;
  min?: number | null;
  max?: number | null;
  oldest?: string | null;
  latest?: string | null;
  count?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vendors".
 */
export interface Vendor {
  id: string;
  /**
   * Vendor name
   */
  name: string;
  /**
   * Vendor name
   */
  vendorName: string;
  /**
   * Vendor description
   */
  description?: string | null;
  /**
   * Rating from 0 to 10
   */
  rating?: number | null;
  /**
   * Count cannot be negative
   */
  count?: number | null;
  /**
   * Average value cannot be negative
   */
  avg?: number | null;
  /**
   * Minimum value cannot be negative
   */
  min?: number | null;
  /**
   * Maximum value cannot be negative
   */
  max?: number | null;
  /**
   * Starting date
   */
  from: string;
  /**
   * Latest update date
   */
  to?: string | null;
  status?: ('unclaimed' | 'pending' | 'claimed' | 'rejected') | null;
  claimedBy?: (string | null) | User;
  claimedAt?: string | null;
  vendorDomain: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-posts".
 */
export interface BlogPost {
  id: string;
  title: string;
  slug: string;
  excerpt: string;
  content: string;
  image: string | Media;
  author: string;
  category: string | Category;
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  status?: ('draft' | 'published') | null;
  publishedAt?: string | null;
  readTime?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "category".
 */
export interface Category {
  id: string;
  name: string;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments".
 */
export interface Comment {
  id: string;
  /**
   * User comment
   */
  user: string | User;
  /**
   * Vendor being commented on
   */
  vendor: string | Vendor;
  /**
   * Rating from 1 to 5
   */
  rating: number;
  /**
   * Comment text
   */
  comment: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'crmusers';
        value: string | Crmuser;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'content';
        value: string | Content;
      } | null)
    | ({
        relationTo: 'products';
        value: string | Product;
      } | null)
    | ({
        relationTo: 'vendors';
        value: string | Vendor;
      } | null)
    | ({
        relationTo: 'blog-posts';
        value: string | BlogPost;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'category';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'comments';
        value: string | Comment;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'crmusers';
        value: string | Crmuser;
      }
    | {
        relationTo: 'users';
        value: string | User;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'crmusers';
        value: string | Crmuser;
      }
    | {
        relationTo: 'users';
        value: string | User;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "crmusers_select".
 */
export interface CrmusersSelect<T extends boolean = true> {
  password?: T;
  role?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  isActive?: T;
  provider?: T;
  socialId?: T;
  tokenVersion?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "content_select".
 */
export interface ContentSelect<T extends boolean = true> {
  pageType?: T;
  slug?: T;
  title?: T;
  metaDescription?: T;
  status?: T;
  views?: T;
  missionStatement?: T;
  values?:
    | T
    | {
        title?: T;
        description?: T;
        id?: T;
      };
  approach?: T;
  teamMembers?:
    | T
    | {
        name?: T;
        role?: T;
        bio?: T;
        image?: T;
        linkedin?: T;
        id?: T;
      };
  backers?:
    | T
    | {
        title?: T;
        description?: T;
        leader?: T;
        leaderProfile?: T;
      };
  ctaSection?:
    | T
    | {
        title?: T;
        description?: T;
        buttonText?: T;
        buttonLink?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  index?: T;
  name?: T;
  rating?: T;
  avg?: T;
  min?: T;
  max?: T;
  oldest?: T;
  latest?: T;
  count?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "vendors_select".
 */
export interface VendorsSelect<T extends boolean = true> {
  name?: T;
  vendorName?: T;
  description?: T;
  rating?: T;
  count?: T;
  avg?: T;
  min?: T;
  max?: T;
  from?: T;
  to?: T;
  status?: T;
  claimedBy?: T;
  claimedAt?: T;
  vendorDomain?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-posts_select".
 */
export interface BlogPostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  excerpt?: T;
  content?: T;
  image?: T;
  author?: T;
  category?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  status?: T;
  publishedAt?: T;
  readTime?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "category_select".
 */
export interface CategorySelect<T extends boolean = true> {
  name?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments_select".
 */
export interface CommentsSelect<T extends boolean = true> {
  user?: T;
  vendor?: T;
  rating?: T;
  comment?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}